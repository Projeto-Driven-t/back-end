// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique @db.VarChar(255)
  password       String           @db.VarChar(255)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  Session        Session[]
  Enrollment     Enrollment[]
  Payment        Payment[]
  Ticket         Ticket[]
  RoomHotel      HotelRoom[]
  UserActivities UserActivities[]
}

model Session {
  id        Int      @id @default(autoincrement())
  userId    Int
  User      User     @relation(fields: [userId], references: [id])
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Event {
  id                 Int      @id @default(autoincrement())
  title              String   @db.VarChar(255)
  backgroundImageUrl String   @db.VarChar(255)
  logoImageUrl       String   @db.VarChar(255)
  startsAt           DateTime
  endsAt             DateTime
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Enrollment {
  id        Int       @id @default(autoincrement())
  name      String    @db.VarChar(255)
  cpf       String    @db.VarChar(255)
  birthday  DateTime
  phone     String    @db.VarChar(255)
  userId    Int       @unique
  User      User      @relation(fields: [userId], references: [id])
  Address   Address[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Address {
  id            Int        @id @default(autoincrement())
  cep           String     @db.VarChar(255)
  street        String     @db.VarChar(255)
  city          String     @db.VarChar(255)
  state         String     @db.VarChar(255)
  number        String     @db.VarChar(255)
  neighborhood  String     @db.VarChar(255)
  addressDetail String?    @db.VarChar(255)
  enrollmentId  Int        @unique
  Enrollment    Enrollment @relation(fields: [enrollmentId], references: [id])
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
}

model Payment {
  id             Int      @id @default(autoincrement())
  name           String   @db.VarChar(255)
  cardNumber     String   @db.VarChar(255)
  expirationDate String   @db.VarChar(255)
  cvv            String   @db.VarChar(255)
  totalValue     String   @db.VarChar(255)
  userId         Int
  User           User     @relation(fields: [userId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Modality {
  id        Int      @id @default(autoincrement())
  modality  String
  price     Float
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Accommodation {
  id            Int      @id @default(autoincrement())
  accommodation String
  price         Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Ticket {
  id                 Int      @id @default(autoincrement())
  userId             Int      @unique
  User               User     @relation(fields: [userId], references: [id])
  modality           String
  modalityPrice      Float
  accommodation      String
  accommodationPrice Float
  totalValue         Float
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Hotel {
  id        Int         @id @default(autoincrement())
  name      String
  roomTypes String
  imageUrl  String
  vacancies Int?
  Room      Room[]
  HotelRoom HotelRoom[]
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

model Room {
  id                 Int         @id @default(autoincrement())
  type               String
  number             String
  hotelId            Int
  Hotel              Hotel       @relation(fields: [hotelId], references: [id])
  maxVacancies       Int
  availableVacancies Int
  createdAt          DateTime    @default(now())
  updatedAt          DateTime    @updatedAt
  RoomHotel          HotelRoom[]
}

model HotelRoom {
  id        Int      @id @default(autoincrement())
  userId    Int      @unique
  User      User     @relation(fields: [userId], references: [id])
  roomId    Int
  Room      Room     @relation(fields: [roomId], references: [id])
  hotelId   Int
  Hotel     Hotel    @relation(fields: [hotelId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Activities {
  id             Int              @id @default(autoincrement())
  name           String           @unique
  place          String
  date           DateTime
  startAt        String
  endsAt         String
  UserActivities UserActivities[]
}

model UserActivities {
  id         Int        @id @default(autoincrement())
  userId     Int
  User       User       @relation(fields: [userId], references: [id])
  activityId Int
  Activities Activities @relation(fields: [activityId], references: [id])
  createdAt  DateTime   @default(now())
}
